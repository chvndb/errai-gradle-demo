apply plugin: "war"

ext {
  gwtDevModules = ["demo.errai.App"]
  gwtModules = gwtDevModules
  gwtLogLevel = allowCliOverride("gwtLogLevel", "INFO")
  gwtLocalWorkers = "2"
  gwtBuildDir = "$buildDir/gwt"
  gwtExtraDir = "$buildDir/gwt-extra"
  gwtDevDir = "$buildDir/gwt-dev"
  gwtDevWorkDir = "$buildDir/gwt-dev-work"
  gwtUnitCacheDir = "$buildDir/gwt-unitcache"
  erraiBuildDir = "$buildDir/errai"
  explodedWarDir = "app.war"
  deployDir = "$projectDir/war/$explodedWarDir"
}

def allowCliOverride(prop, defaultVal) {
  hasProperty(prop) ? getProperty(prop) : defaultVal
}

def exec(cmd) {
  cmd.execute().text.trim()
}

repositories {
  mavenCentral()
}

dependencies {
  def gwt = "2.8.0"
  def errai = "4.0.0.CR1"
  def gmd = "2.0-rc3"
  def gmdJquery = "1.0-rc3"
  def gmdTable = "1.0-rc3"

  providedCompile "com.google.gwt:gwt-user:$gwt"
  providedCompile "com.google.gwt:gwt-dev:$gwt"
  runtime "com.google.gwt:gwt-servlet:$gwt"

  compile "org.jboss.errai:errai-javaee-all:$errai"
  compile "org.jboss.errai:errai-jboss-as-support:$errai"

  providedCompile "com.github.gwtmaterialdesign:gwt-material:$gmd"
  providedCompile "com.github.gwtmaterialdesign:gwt-material-addins:$gmd"
  providedCompile "com.github.gwtmaterialdesign:gwt-material-themes:$gmd"
  providedCompile "com.github.gwtmaterialdesign:gwt-material-jquery:$gmdJquery"
  providedCompile "com.github.gwtmaterialdesign:gwt-material-table:$gmdTable"
}

clean.doFirst {
  delete "${projectDir}/.errai"
  delete "${projectDir}/war"
}

// merge the resource outputs with the class outputs to ensure errai required
// property files are picked up correctly, e.g. ErraiApp.propeties
sourceSets.main.output.resourcesDir = sourceSets.main.output.classesDir

task gwtCompile(type:JavaExec) {
  main = "com.google.gwt.dev.Compiler"

  outputs.dir gwtBuildDir

  // avoids generated errai classes to be added to the build/classes folder
  // which in turn would trigger a redundant recompile even when nothing changes
  // NOTE: the generated classes need be added to the final WAR
  systemProperties["errai.server.classOutput"] = erraiBuildDir

  classpath {[
    sourceSets.main.java.srcDirs,
    sourceSets.main.output.resourcesDir,
    sourceSets.main.output.classesDir,
    sourceSets.main.compileClasspath
  ]}

  args = [
    gwtModules,
    "-war", gwtBuildDir,
    "-logLevel", gwtLogLevel,
    "-localWorkers", gwtLocalWorkers,
    "-failOnError",
    "-generateJsInteropExports",
    "-extra", gwtExtraDir
  ].flatten()
}
// makes sure that the generated client-side classes and output resources
// are available needed to trigger all the Errai generators
gwtCompile.dependsOn classes

war.dependsOn gwtCompile
war {
  from gwtBuildDir                                  // include GWT generated output files
  from (erraiBuildDir) { into "WEB-INF/classes" }   // include Errai generated output files
  rootSpec.exclude("**/client/**")                  // exclude GWT specific client-side java source code
}

task gwtDev(type:JavaExec) {
  main = "com.google.gwt.dev.codeserver.CodeServer"

  systemProperties["gwt.persistentunitcachedir"] = gwtUnitCacheDir

  doFirst { file(gwtDevWorkDir).mkdirs() }

  classpath {[
    sourceSets.main.java.srcDirs,
    sourceSets.main.output.resourcesDir,
    sourceSets.main.output.classesDir,
    sourceSets.main.compileClasspath
  ]}

  args = [
    gwtDevModules,
    "-logLevel", gwtLogLevel,
    "-launcherDir", deployDir,
    "-workDir", gwtDevWorkDir,
    "-style", "Pretty",
    "-generateJsInteropExports",
    "-bindAddress", "0.0.0.0"
  ].flatten()
}

task deploy(type: Copy) {
  doFirst { file(deployDir).mkdirs() }
  doFirst { delete deployDir }
  into deployDir
  with war
}
deploy.dependsOn war

task stop {
  doLast { exec("docker-compose -f src/main/docker/wildfly.yml down") }
}

task start {
  doFirst { file(deployDir).mkdirs() }
  doLast { exec("docker-compose -f src/main/docker/wildfly.yml up -d") }
}
start.dependsOn stop
start.dependsOn clean
start.finalizedBy deploy
