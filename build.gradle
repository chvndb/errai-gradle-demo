buildscript {
  ext.overridable = { prop, defaultVal ->
    hasProperty(prop) ? getProperty(prop) : defaultVal
  }

  ext.exec = { cmd ->
    cmd.execute().text.trim()
  }

  ext.versions = [ gmd: [:] ]
  versions.gwt          =   "2.8.0"
  versions.errai        =   "4.0.0.CR1"
  versions.gmd.core     =   "2.0-rc3"
  versions.gmd.jquery   =   "1.0-rc3"
  versions.gmd.table    =   "1.0-rc3"

  ext.gwt =  [ modules: [:], dir: [:], log: [:] ]
  gwt.workers           =   "2"
  gwt.modules.dev       =   "demo.errai.App"
  gwt.modules.prod      =   "demo.errai.App"
  gwt.dir.build         =   "${buildDir}/gwt"
  gwt.dir.input         =   "${gwt.dir.build}/input"
  gwt.dir.output        =   "${gwt.dir.build}/output"
  gwt.dir.extra         =   "${gwt.dir.build}/extra"
  gwt.dir.dev           =   "${gwt.dir.build}/dev"
  gwt.dir.unitcache     =   "${gwt.dir.build}/unitcache"
  gwt.log.dev           =   overridable("gwtLogDev", "INFO")
  gwt.log.prod          =   overridable("gwtLogProd", "INFO")

  ext.errai =  [ dir: [:] ]
  errai.dir.work        =   "${projectDir}/.errai"
  errai.dir.build       =   "${buildDir}/errai"
  errai.dir.output      =   "${errai.dir.build}/output"

  ext.deploy =  [ dir: [:] ]
  deploy.dir.war        =   "${projectDir}/war"
  deploy.dir.app        =   "${deploy.dir.war}/${name}.war"
}

apply plugin: "war"
apply plugin: "eclipse"

repositories {
  mavenCentral()
}

dependencies {
  providedCompile "com.google.gwt:gwt-user:$versions.gwt"
  providedCompile "com.google.gwt:gwt-dev:$versions.gwt"
  runtime "com.google.gwt:gwt-servlet:$versions.gwt"

  compile "org.jboss.errai:errai-javaee-all:$versions.errai"
  compile "org.jboss.errai:errai-jboss-as-support:$versions.errai"

  providedCompile "com.github.gwtmaterialdesign:gwt-material:$versions.gmd.core"
  providedCompile "com.github.gwtmaterialdesign:gwt-material-addins:$versions.gmd.core"
  providedCompile "com.github.gwtmaterialdesign:gwt-material-themes:$versions.gmd.core"
  providedCompile "com.github.gwtmaterialdesign:gwt-material-jquery:$versions.gmd.jquery"
  providedCompile "com.github.gwtmaterialdesign:gwt-material-table:$versions.gmd.table"
}

clean.doFirst {
  delete errai.dir.work
  delete deploy.dir.war
}

// merge the resource outputs with the class outputs to ensure errai required
// property files are picked up correctly, e.g. ErraiApp.propeties
sourceSets.main.output.resourcesDir = sourceSets.main.output.classesDir

task gwtCompile(type:JavaExec) {
  main = "com.google.gwt.dev.Compiler"

  outputs.dir gwt.dir.output

  // avoids generated errai classes to be added to the build/classes folder
  // which in turn would trigger a redundant recompile even when nothing changes
  // NOTE: the generated classes need be added to the final WAR
  systemProperties["errai.server.classOutput"] = errai.dir.build

  classpath {[ gwt.dir.input, sourceSets.main.compileClasspath ]}

  args = [
    gwt.modules.prod,
    "-war", gwt.dir.output,
    "-logLevel", gwt.log.prod,
    "-localWorkers", gwt.workers,
    "-failOnError",
    "-generateJsInteropExports",
    "-extra", gwt.dir.extra
  ].flatten()
}
// makes sure that the generated client-side classes and output resources
// are available needed to trigger all the Errai generators
gwtCompile.dependsOn classes

war.dependsOn gwtCompile
war {
  from gwt.dir.output                                // include GWT generated output files
  from (errai.dir.output) { into "WEB-INF/classes" } // include Errai generated output files
  rootSpec.exclude("**/client/**")                   // exclude GWT specific client-side java source code
}

task gwtDev(type:JavaExec) {
  main = "com.google.gwt.dev.codeserver.CodeServer"

  systemProperties["gwt.persistentunitcachedir"] = gwt.dir.unitcache

  doFirst { file(gwt.dir.dev).mkdirs() }

  classpath {[ gwt.dir.input, sourceSets.main.compileClasspath ]}

  args = [
    gwt.modules.dev,
    "-logLevel", gwt.log.dev,
    "-launcherDir", deploy.dir.app,
    "-workDir", gwt.dir.dev,
    "-style", "Pretty",
    "-generateJsInteropExports",
    "-bindAddress", "0.0.0.0"
  ].flatten()
}

task redeploy(type: Copy) {
  doFirst { file(deploy.dir.app).mkdirs() }
  doFirst { delete deploy.dir.app }
  into deploy.dir.app
  with war
}
redeploy.dependsOn war

task stop {
  doLast { exec("docker-compose -f src/main/docker/wildfly.yml down") }
}

task start {
  doFirst { file(deploy.dir.app).mkdirs() }
  doLast { exec("docker-compose -f src/main/docker/wildfly.yml up -d") }
}
start.dependsOn stop
start.dependsOn clean
start.finalizedBy deploy
